# -*- coding: utf-8 -*-
"""fitness-tracker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18qaA5Dj7bI9KP3lCch_viDLRxZ2hz5pz
"""

import os
import datetime
from datetime import datetime, timedelta

# Function to add user information
def add_user_info():
    print("\nAdd User Information")
    name = input("Enter your name: ")
    dob = input("Enter your date of birth (YYYY-MM-DD): ")
    weight = float(input("Enter your weight (in kilograms): "))
    height = float(input("Enter your height (in meters): "))
    age = calculate_age(dob)
    bmi = calculate_bmi(weight, height)
    bmi_category = get_bmi_category(bmi)
    gender = input("Enter your gender (Male/Female): ").lower()  # Get user gender

    with open("user_info.txt", "w") as file:
        file.write(f"Name: {name}\n")
        file.write(f"Date of Birth: {dob}\n")
        file.write(f"Age: {age}\n")
        file.write(f"Weight: {weight} kg\n")
        file.write(f"Height: {height} m\n")
        file.write(f"BMI: {bmi:.2f} ({bmi_category})\n")
        file.write(f"Gender: {gender.capitalize()}\n")
    
    if gender == "female":
        add_period_data()

    print("User information added successfully!")

# Function to calculate age based on date of birth
def calculate_age(dob):
    dob = datetime.strptime(dob, "%Y-%m-%d")
    today = datetime.today()
    age = today.year - dob.year - ((today.month, today.day) < (dob.month, dob.day))
    return age

def get_bmi_category(bmi):
    if bmi < 18.5:
        return "Underweight"
    elif 18.5 <= bmi < 25:
        return "Healthy weight"
    elif 25 <= bmi < 30:
        return "Overweight"
    elif 30 <= bmi < 40:
        return "Obesity"
    else:
        return "Severe obesity"

# Function to calculate BMI
def calculate_bmi(weight, height):
    return weight / (height ** 2)

# Function to add data
def add_data():
    print("\nAdd Data")
    date = input("Enter date (YYYY-MM-DD): ")
    exercise = input("Enter exercise: ")
    duration = input("Enter duration (in minutes): ")

    with open("fitness_data.txt", "a") as file:
        file.write(f"Date: {date}, Exercise: {exercise}, Duration: {duration} minutes\n")

    print("Data added successfully!")

# Function to view data
def view_data():
    print("\nView Data")
    try:
        # Read and display user info
        print("User Information:")
        with open("user_info.txt", "r") as user_file:
            for line in user_file:
                print(line.strip())

        # Read and display fitness data
        print("\nFitness Data:")
        with open("fitness_data.txt", "r") as fitness_file:
            for line in fitness_file:
                print(line.strip())
    except FileNotFoundError:
        print("No data found.")

# Function to remove data
def remove_data():
    print("\nRemove Data")
    date = input("Enter date (YYYY-MM-DD) of the data to remove: ")

    try:
        with open("fitness_data.txt", "r") as file:
            lines = file.readlines()
        with open("fitness_data.txt", "w") as file:
            for line in lines:
                if date not in line:
                    file.write(line)
        print("Data removed successfully!")
    except FileNotFoundError:
        print("No data found.")

# Function to filter data by exercise
def filter_data():
    print("\nFilter Data")
    exercise = input("Enter exercise to filter by: ")

    try:
        with open("fitness_data.txt", "r") as file:
            for line in file:
                if exercise in line:
                    print(line.strip())
    except FileNotFoundError:
        print("No data found.")

# Function to add period data
def add_period_data():
    print("\nAdd Period Data")
    last_period_start = input("Enter the date of your last period start (YYYY-MM-DD): ")
    period_data = track_period(datetime.strptime(last_period_start, '%Y-%m-%d'))
    
    with open("user_info.txt", "a") as file:
        file.write(f"Last Period Start: {last_period_start}\n")
        file.write(f"Period Data: {period_data['start_date']} to {period_data['end_date']}\n")
        file.write(f"Next Period Date: {period_data['next_date']}\n")
    
    print("Period data added successfully!")

    

# Function to calculate period
def track_period(start_date):
    end_date = start_date + timedelta(days=4)  # Period lasts for 4 days (including the start date)
    next_date = start_date + timedelta(days=27)  # Next period starts 28 days from the current start date
    return {'start_date': start_date.strftime('%Y-%m-%d'), 'end_date': end_date.strftime('%Y-%m-%d'), 'next_date': next_date.strftime('%Y-%m-%d')}



# Modified Function to calculate progress based on a 7-day activity goal
# Modified Function to calculate progress based on a 7-day activity goal
def calculate_progress():
    print("\nCalculate Progress")
    goal = int(input("Enter your weekly fitness goal in minutes: "))
    total_duration_last_7_days = 0
    today = datetime.today().date()  # Convert to datetime.date
    seven_days_ago = today - timedelta(days=7)  # Use timedelta for consistency
 
    try:
        with open("fitness_data.txt", "r") as file:
            for line in file:
                parts = line.strip().split(", ")
                date_str = parts[0].split(": ")[1]
                try:
                    entry_date = datetime.strptime(date_str, "%Y-%m-%d").date()  # Convert to datetime.date
                    if seven_days_ago <= entry_date <= today:
                        duration_part = int(parts[2].split(": ")[1].split(" ")[0])
                        total_duration_last_7_days += duration_part
                except ValueError:
                    print(f"Skipping entry with incorrect date format: {date_str}")
 
        progress = (total_duration_last_7_days / goal) * 100
        print(f"You have completed {progress:.2f}% of your weekly goal.")
    except FileNotFoundError:
        print("No data found.")

def search():
    print("\nSearch Data by Date")
    search_date = input("Enter the date to search for (YYYY-MM-DD): ")
 
    try:
        found = False
        with open("fitness_data.txt", "r") as file:
            for line in file:
                if search_date in line:
                    print(line.strip())
                    found = True
        if not found:
            print("No entries found for the given date.")
    except FileNotFoundError:
        print("No data found.")




# Main function
def main():
    if not os.path.exists("fitness_data.txt"):
        with open("fitness_data.txt", "w"):  # Create the data file if it doesn't exist
            pass

    print("Welcome to the Fitness Tracker")

    while True:
        print("\nMenu:")
        print("1. Add User Information")
        print("2. Add Exercise")
        print("3. View Data")
        print("4. Remove Data")
        print("5. Filter Data")
        print("6. Calculate Progress")
        print("7. Search by date")
        print("8. Exit")

        choice = input("Enter your choice: ")

        if choice == "1":
            add_user_info()
        elif choice == "2":
            add_data()
        elif choice == "3":
            view_data()
        elif choice == "4":
            remove_data()
        elif choice == "5":
            filter_data()
        elif choice == "6":
            calculate_progress()
        elif choice == "7":
            search()
        elif choice == "8":
            print("Thank you for using the Fitness Tracker. Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
